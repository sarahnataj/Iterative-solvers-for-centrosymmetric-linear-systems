function [error, A, C, M]=error_Biharmonic_varcoef(n,k,acase)
% Calculate spectral differentiation (pseudospectral) matrix associated with
% 2D variable-cofficient biharmonic operator given by
% \Delta(a \Delta u)=f u\in[-1,1], u=d/dn=0 on the boundary, 
% a(x,y)=1+kx^2y^2 for k1>=a(x,y)>=k0>0, k>=0.
% Input: n is the number of interior nodes,
%       k is the constant in a(x,y)=1+kx^2y^2, set k=0 to biharmonic equation
%       acase is to choose a(x,y)
% Output: error=\|u-u_ex\|_{\infty}, uex is the exact solution of the 2D 
%         variable-coefficient biharmonic equation at the collocation 
%         points, u is the approximated solution.
%         A is the associated spectral differentition matrix 
%        
% Author: Sarah Nataj, email:sarah.nataj@gmail.com
method=2; % 1=Legendre  2=Cheb
[D, node]=PSDirv(n,method);
D2=D*D; 
B=(diag(1-node.^2)*D^2-4*diag(node)*D-2*eye(n+1))*diag([0; 1./(1-node(2:n).^2); 0]);
[X,Y]=meshgrid(node,node);
if acase==1
S=1+k*((X.^2).*(Y.^2));% symmetric, even in X and in Y
elseif acase==2
S=2+sin((X.^2).*Y);%not symmetric in x,y
elseif acase==3
S=1+((X.^2).*(Y.^4));%even in x and in y
end
S=diag(reshape(S,(n+1)^2,1));S=sparse(S);
A=kron(D2,eye(n+1))*S*kron(B,eye(n+1))...
    +kron(eye(n+1),D2)*S*kron(eye(n+1),B)...
    +kron(eye(n+1),D2)*S*kron(B,eye(n+1))...
    +kron(D2,eye(n+1))*S*kron(eye(n+1),B);
in=[];
    for jj=1:n-1
        in=[in, jj*(n+1)+2:jj*(n+1)+n];
    end
A=A(in,in);
% calculate C, the sparse part of A
C=kron(D2,speye(n+1))*S*kron(B,speye(n+1))...
    +kron(speye(n+1),D2)*S*kron(speye(n+1),B);
C=C(in,in);
% calculate dense part of A approximated by finite difference at the colocation points
N=fdpoisson(node);
S=S(in,in);
M=C+kron(speye(n-1),N)*S*kron(N,speye(n-1))...
    +kron(N,speye(n-1))*S*kron(speye(n-1),N);

% calcualte uex
[X,Y]=meshgrid(node(2:n));
uex=(sin(pi*X).^2).*(sin(pi*Y).^2);
uex=reshape(uex',(n-1)^2,1);

%
%calculatef
if acase==1
f=(k*(X.^2).*(Y.^2)+ 1).*(4*pi^4*cos(pi*X).^2.*(cos(pi*Y).^2) ...
    - 4*pi^4*cos(pi*X).^2.*(sin(pi*Y).^2) ...
    - 12*pi^4*cos(pi*Y).^2.*(sin(pi*X).^2)...
    + 12*pi^4*sin(pi*X).^2.*(sin(pi*Y).^2))...
    + (k*(X.^2).*(Y.^2) + 1).*(4*pi^4*cos(pi*X).^2.*(cos(pi*Y).^2) ...
    - 12*pi^4*cos(pi*X).^2.*(sin(pi*Y).^2)...
    - 4*pi^4*cos(pi*Y).^2.*(sin(pi*X).^2) ...
    + 12*pi^4*sin(pi*X).^2.*(sin(pi*Y).^2)) ...
    + 2*k*X.^2.*(2*pi^2*cos(pi*X).^2.*(sin(pi*Y).^2)...
    + 2*pi^2*cos(pi*Y).^2.*(sin(pi*X).^2) ...
    - 4*pi^2*sin(pi*X).^2.*(sin(pi*Y).^2)) ...
    + 2*k*Y.^2.*(2*pi^2*cos(pi*X).^2.*(sin(pi*Y).^2) ...
    + 2*pi^2*cos(pi*Y).^2.*(sin(pi*X).^2) ...
    - 4*pi^2*sin(pi*X).^2.*sin(pi*Y).^2) ...
    + 4*k*X.*(Y.^2).*(4*pi^3*cos(pi*X).*(cos(pi*Y).^2).*sin(pi*X) ...
    - 12*pi^3*cos(pi*X).*sin(pi*X).*(sin(pi*Y).^2)) ...
    + 4*k*(X.^2).*Y.*(4*pi^3*(cos(pi*X).^2).*cos(pi*Y).*sin(pi*Y) ...
    - 12*pi^3*cos(pi*Y).*(sin(pi*X).^2).*sin(pi*Y));

elseif acase==2
f=(sin(pi*(X.^2).*Y) + 2).*(4*(pi^4)*(cos(pi*X).^2).*(cos(pi*Y).^2) ...
    - 4*(pi^4)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
    - 12*(pi^4)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
    + 12*(pi^4)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
    + (sin(pi*(X.^2).*Y) + 2).*(4*(pi^4)*(cos(pi*X).^2).*(cos(pi*Y).^2)...
        - 12*(pi^4)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
        - 4*(pi^4)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
        + 12*(pi^4)*(sin(pi*X).^2).*(sin(pi*Y).^2)) ...
     + 2*pi*(X.^2).*cos(pi*(X.^2).*Y).*(4*(pi^3)*(cos(pi*X).^2).*cos(pi*Y).*sin(pi*Y) ...
        - 12*(pi^3)*cos(pi*Y).*(sin(pi*X).^2).*sin(pi*Y))... 
    - (pi^2)*(X.^4).*sin(pi*(X.^2).*Y).*(2*(pi^2)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
        + 2*(pi^2)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
        - 4*(pi^2)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
    + 2*pi*Y.*cos(pi*(X.^2).*Y).*(2*(pi^2)*(cos(pi*X).^2).*(sin(pi*Y).^2)...
        + 2*(pi^2)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
        - 4*(pi^2)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
    - 4*(pi^2)*(X.^2)*(Y.^2).*sin(pi*(X.^2).*Y).*(2*(pi^2)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
        + 2*(pi^2)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
        - 4*(pi^2)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
+ 4*pi*X.*Y.*cos(pi*(X.^2).*Y).*(4*(pi^3)*cos(pi*X).*(cos(pi*Y).^2).*sin(pi*X) ...
        - 12*(pi^3)*cos(pi*X).*sin(pi*X).*(sin(pi*Y).^2));
 

elseif acase==3
 f=(2*(Y.^4)).*(2*(pi^2)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
    + 2*(pi^2)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
    - 4*(pi^2)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
+ ((X.^2).*(Y.^4) + 1).*(4*(pi^4)*(cos(pi*X).^2).*(cos(pi*Y).^2) ...
    - 4*(pi^4)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
    - 12*(pi^4)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
    + 12*(pi^4)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
+ ((X.^2).*(Y.^4) + 1).*(4*(pi^4)*(cos(pi*X).^2).*(cos(pi*Y).^2)...
    - 12*(pi^4)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
    - 4*(pi^4)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
    + 12*(pi^4)*(sin(pi*X).^2).*(sin(pi*Y).^2))...
+ (12*(X.^2).*(Y.^2)).*(2*(pi^2)*(cos(pi*X).^2).*(sin(pi*Y).^2) ...
    + 2*(pi^2)*(cos(pi*Y).^2).*(sin(pi*X).^2) ...
    - 4*(pi^2)*(sin(pi*X).^2).*(sin(pi*Y).^2)) ...
+ (4*X.*(Y.^4)).*(4*(pi^3)*cos(pi*X).*(cos(pi*Y).^2).*sin(pi*X) ...
    - 12*(pi^3)*cos(pi*X).*sin(pi*X).*(sin(pi*Y).^2))...
+ (8*(X.^2).*(Y.^3)).*(4*(pi^3)*(cos(pi*X).^2).*cos(pi*Y).*sin(pi*Y) ...
    - 12*(pi^3)*cos(pi*Y).*(sin(pi*X).^2).*sin(pi*Y));


end
f=reshape(f,(n-1)^2,1);
u=A\f;
error=norm(uex-u,inf);
%cond(full(A))
%size(A)
% figure(1), mesh(X,Y,reshape(uex,n-1,n-1)),
% figure(2), mesh(X,Y,reshape(u,n-1,n-1))

% syms k X Y
% L(X,Y)=(sin(pi*X)^2)*(sin(pi*Y)^2);
% L=laplacian(L,[X,Y]);
% L=(1+k*X*Y)*L;
% L=laplacian(L,[X,Y])
end

function M=fdpoisson(node)
n=size(node,1)-1;
for j=1:size(node)-1
    h(j)=node(j)-node(j+1);
end
B=zeros(n-1,n-1);
B(1,1)=2/(h(2)*h(1));
B(1,2)=-2/(h(2)*(h(2)+h(1)));
for j=2:n-2
    B(j,j)=2/(h(j)*h(j+1));
    B(j,j+1)=-2/(h(j+1)*(h(j)+h(j+1)));
    B(j,j-1)=-2/(h(j)*(h(j)+h(j+1)));
end
B(n-1,n-2)=-2/(h(n-1)*(h(n-1)+h(n)));
B(n-1,n-1)=2/(h(n)*h(n-1));
M=B;
%M=kron(speye(n-1),B)+kron(B,speye(n-1));
end